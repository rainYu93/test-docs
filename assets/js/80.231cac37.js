(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{482:function(e,t,s){"use strict";s.r(t);var r=s(56),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"_1-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[e._v("#")]),e._v(" 1 概述")]),e._v(" "),s("h3",{attrs:{id:"_1-1-文档概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-文档概述"}},[e._v("#")]),e._v(" 1.1 文档概述")]),e._v(" "),s("p",[e._v("基于实际的移动端开发及对接经验，我们发现目前越来越多的项目提出将我方移动端界面集成到客户方已有系统中进行展示。大致场景类似，在OA审批一个流程，审批过程中需要查看我方系统的单据页面，\n或者我方系统推送一条消息到第三方系统，当第三方系统使用手机端点击消息的时候可以载入到我方系统中某某界面。如工作流是最常遇到的场景，客户方收到待办消息后需点击消息进入我方系统进行\n审批，等等类似的场景有很多。")]),e._v(" "),s("p",[e._v('工作流作为一个标准化的场景，审批工作台和第三系统对接已经通过短链接配置形成一个标准的方案，然也会有很多的项目不局限于只和审批工作台界面集成，可能会扩展成任意界面，比如需求的某个\n功能界面，订单的某个功能界面。此文档则着重说明，在"集中交付"团队与第三方系统做好单点登录的前提下如何通过短链接配置的方式，以达到界面皆可载入的场景。')]),e._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[e._v("前提条件")]),e._v(" "),s("p",[e._v("1、双方系统已经进行了单点集成，可免密从第三方系统登录我方系统")]),e._v(" "),s("p",[e._v("2、免密登录成功后重定向到我方前端界面是通过短链接配置的方式进行实现的")])]),e._v(" "),s("h2",{attrs:{id:"_2-配置说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-配置说明"}},[e._v("#")]),e._v(" 2 配置说明")]),e._v(" "),s("p",[e._v("配置路径: 配置表->短链接")]),e._v(" "),s("h3",{attrs:{id:"_2-1-子应用载入配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-子应用载入配置"}},[e._v("#")]),e._v(" 2.1 子应用载入配置")]),e._v(" "),s("p",[e._v("载入的界面所属某一个独立的子应用功能，本身具有路由属性。")]),e._v(" "),s("img",{staticClass:"img-style",attrs:{src:e.$withBase("/assets/img/document/unlinkFrist.png")}}),e._v(" "),s("ul",[s("li",[s("p",[e._v("1、固定前缀：WxCover/#/?navigateTo=")])]),e._v(" "),s("li",[s("p",[e._v("2、实际载入url: %252FappSour%252F%2523%252FExpertRatingList%253FsourceHeaderId%253D${sourceHeaderId}\n%2526expertUserId%253D${expertUserId}%2526sequenceNum%253D${sequenceNum}%2526sourceNum%253D${sourceNum}")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("2.1、当前url经过两次urlEncode，解码后如下：/appSour/#/ExpertRatingList?sourceHeaderId=${sourceHeaderId}&\nexpertUserId=${expertUserId}&sequenceNum=${sequenceNum}&sourceNum=${sourceNum}")])]),e._v(" "),s("li",[s("p",[e._v("2.2、appSour为当前子应用所属服务的简称，ExpertRatingList为载入界面的路由，两者之间#不可少，其余的都是参数")])]),e._v(" "),s("li",[s("p",[e._v("2.3、注意，参数占位符千万不要进行编码")])])])])]),e._v(" "),s("h3",{attrs:{id:"_2-1-表单组件载入配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-表单组件载入配置"}},[e._v("#")]),e._v(" 2.1 表单组件载入配置")]),e._v(" "),s("p",[e._v("载入的界面纯粹的是一个组件，比如嵌入工作流里面的审批表单，其本身不具有路由属性无法直接跳转")]),e._v(" "),s("img",{staticClass:"img-style",attrs:{src:e.$withBase("/assets/img/document/unlinkSecond.png")}}),e._v(" "),s("ul",[s("li",[s("p",[e._v("1、固定前缀：WxCover/#/?navigateTo=%2FappPlat%2F%23%2FCompView%3FcomponentName%3D")])]),e._v(" "),s("li",[s("p",[e._v("2、实际载入组件: %252FappSour%252FAgreementApproval%253FpcHeaderId%253D${pcHeaderId}")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("2.1、当前组件路经过两次urlEncode，解码后如下：/appSour/AgreementApproval?pcHeaderId=${pcHeaderId}")])]),e._v(" "),s("li",[s("p",[e._v("2.2、appSour为当前子应用所属服务的简称，AgreementApproval为当前组件对外曝露的名称（不知道如何将组件曝露，参考"),s("RouterLink",{attrs:{to:"/course/workFlowDevelopNew.html#_2-1-标准审批表单开发"}},[e._v("工作流表单")]),e._v("）")],1)]),e._v(" "),s("li",[s("p",[e._v("2.3、注意，参数占位符千万不要进行编码")])])])])]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),s("p",[e._v("💁\n这种方式本质上就是开发了一个通用子应用，当前子应用的作用就是动态加载组件（根据配置的路由路径进行加载）把不具有路由属性的组件放入了一个具有路由属性的功能中。\n当然，各模块固然可以在自己的服务里面开一个子应用去承载组件展示，当前平台提供此通用方法仅是方便各模块可以直接使用，无需在单独开发多余的功能。")])])])}),[],!1,null,null,null);t.default=a.exports}}]);